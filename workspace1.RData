d_hilton_1 <- read.csv("~/FYP_LR_Prototype/op_spam_v1.4/op_spam_v1.4/positive_polarity/deceptive_from_MTurk/fold1/d_hilton_1.txt")
View(d_hilton_1)
View(d_hilton_1)
View(d_hilton_1)
View(d_hilton_1)
View(d_hilton_1)
View(d_hilton_1)
help()
View(d_hilton_1)
View(d_hilton_1)
amazon_reviews <- read.delim("~/FYP_LR_Prototype/amazon_reviews.txt")
View(amazon_reviews)
View(amazon_reviews)
View(amazon_reviews)
library(caret)
View(amazon_reviews)
set.seed(101)
library(caret)
set.seed(101)
sample <- sample.int(n = nrow(data), size = floor(.75*nrow(data)), replace = F)
set.seed(101)
smp_siz = floor(0.75*nrow(amazon_reviews))
smp_siz = floor(0.70*nrow(amazon_reviews))
train_ind=sample(seq_len(nrow(amazon_reviews)),size=smp_siz)
train=amazon_reviews[train_ind,]
test=amazon_reviews[-train_ind,]
View(test)
View(test)
pos.polarity.from.mturk.directory <- read.table("~/FYP_LR_Prototype/op_spam_v1.4/op_spam_v1.4/pos polarity from mturk directory.txt", header=TRUE, quote="\"")
View(pos.polarity.from.mturk.directory)
warnings()
View(amazon_reviews)
View(pos.polarity.from.mturk.directory)
pos.polarity.from.mturk.directory <- read.table("~/FYP_LR_Prototype/op_spam_v1.4/op_spam_v1.4/pos polarity from mturk directory.txt", header=TRUE, quote="\"")
View(pos.polarity.from.mturk.directory)
View(pos.polarity.from.mturk.directory)
View(amazon_reviews)
View(pos.polarity.from.mturk.directory)
View(pos.polarity.from.mturk.directory)
View(pos.polarity.from.mturk.directory)
View(pos.polarity.from.mturk.directory)
summary()
library(tidyverse)
library(ggplot2)
library(glm2)
library(glm.predict)
library(stringr)
library(tidyr)
library(tm)
/help tm
/help
help tm
amazon_reviews <- read.delim("~/FYP_LR_Prototype/amazon_reviews.txt")
View(amazon_reviews)
View(amazon_reviews)
library(caret)
set.seed(101)
sample <- sample.int(n = nrow(data), size = floor(.75*nrow(data)), replace = F)
smp_siz = floor(0.75*nrow(amazon_reviews))
smp_siz = floor(0.70*nrow(amazon_reviews))
train_ind=sample(seq_len(nrow(amazon_reviews)),size=smp_siz)
train=amazon_reviews[train_ind,]
test=amazon_reviews[-train_ind,]
> corpus = VCorpus(VectorSource(amazon_reviews$test))
> corpus = VCorpus(VectorSource(test))
> corpus = VCorpus(VectorSource(train))
trainCorpus = VCorpus(VectorSource(amazon_reviews$train))
View(trainCorpus)
View(trainCorpus)
trainCorpus = VCorpus(VectorSource(train))
trainCorpus = tm_map(corpus, content_transformer(tolower))
trainCorpus = tm_map(trainCorpus, content_transformer(tolower))
> corpus = VCorpus(VectorSource(train))
corpus = VCorpus(VectorSource(train))
View(trainCorpus)
View(trainCorpus)
View(trainCorpus)
tcorpus = VCorpus(VectorSource(train))
tcorpus = tm_map(tcorpus, content_transformer(tolower))
tcorpus = tm_map(tcorpus, PlainTextDocument)
View(test)
View(test)
View(tcorpus)
tcorpus = tm_map(tcorpus, removeWords, stopwords("en"))
View(tcorpus)
tcorpus[["character(0)"]][["content"]]]
tcorpus = tm_map(tcorpus, stemDocument)
View(tcorpus)
View(tcorpus)
View(tcorpus)
View(test)
str(train)
corpus = VCorpus(VectorSource(train))
tcorpus = VCorpus(VectorSource(train$REVIEW_TEXT))
View(tcorpus)
View(corpus)
trcorpus = VCorpus(VectorSource(train$REVIEW_TEXT))
View(trcorpus)
View(trcorpus)
trcorpus = tm_map(trcorpus, content_transformer(tolower))
trcorpus = tm_map(trcorpus, PlainTextDocument)
trcorpus = tm_map(trcorpus, removeWords, stopwords("en"))
trcorpus = tm_map(trcorpus, stemDocument)
View(trcorpus)
View(trcorpus)
trcorpus = tm_map(trcorpus, removePunctuation)
trcorpus = tm_map(trcorpus, removeWords, stopwords("en"))
trcorpus = tm_map(trcorpus, stemDocument)
View(tcorpus)
View(tcorpus)
View(trcorpus)
View(trcorpus)
dtm = DocumentTermMatrix(trcorpus)
View(dtm)
View(dtm)
dtm
> spdtm = removeSparseTerms(dtm, 0.95)
spdtm = removeSparseTerms(dtm, 0.95)
dtm
spdtm
amazonreviewSparse = as.data.frame(as.matrix(spdtm))
amazonreviewSparse
View(amazonreviewSparse)
View(amazonreviewSparse)
> sort(colSums(amazonreviewSparse))
sort(colSums(amazonreviewSparse))
View(dtm)
savehistory("~/FYP_LR_Prototype/test.Rhistory")
load("~/FYP_LR_Prototype/amazon_reviews.txt")
load("~/FYP_LR_Prototype/amazon_reviews.txt")
amazon_reviews <- read.delim("~/FYP_LR_Prototype/amazon_reviews.txt")
View(amazon_reviews)
trcorpus = VCorpus(VectorSource(amazon_reviews$REVIEW_TEXT))
trcorpus = tm_map(trcorpus, content_transformer(tolower))
trcorpus = tm_map(trcorpus, removePunctuation)
trcorpus = tm_map(trcorpus, PlainTextDocument)
trcorpus = tm_map(trcorpus, stemDocument)
dtm = DocumentTermMatrix(trcorpus)
spdtm = removeSparseTerms(dtm, 0.95)
amazonreviewSparse = as.data.frame(as.matrix(spdtm))
sort(colSums(amazonreviewSparse))
View(dtm)
View(dtm)
View(spdtm)
View(spdtm)
View(trcorpus)
View(trcorpus)
View(trcorpus)
> sort(colSums(subset(amazonreviewSparse, Verified_Purchase == Y)))
sort(colSums(subset(amazonreviewSparse, Verified_Purchase == Y)))
sort(colSums(subset(amazonreviewSparse, Verified_Purchase == TRUE)))
> colnames(amazonreviewSparse) = make.names(colnames(amazonreviewSparse))
colnames(amazonreviewSparse) = make.names(colnames(amazonreviewSparse))
View(amazonreviewSparse)
sort(colSums(amazonreviewSparse))
sort(colSums(subset(amazonreviewSparse, Verified_Purchase == TRUE)))
sort(colSums(subset(amazonreviewSparse, Verified_Purchase == N)))
sort(colSums(subset(amazonreviewSparse, Verified_Purchase == 'N')))
sort(colSums(subset(amazonreviewSparse, Friend == 0)))
save.image("~/FYP_LR_Prototype/workspace1.RData")
str(amazon_reviews)
sort(colSums(subset(amazonreviewSparse, VERIFIED_PURCHASE == 'N')))
sort(colSums(subset(amazonreviewSparse, VERIFIED_PURCHASE == N)))
sort(colSums(subset(amazonreviewSparse, VERIFIED_PURCHASE == "N")))
> amazonreviewSparse$VERIFIED_PURCHASE = amazon_reviews$VERIFIED_PURCHASE
amazonreviewSparse$VERIFIED_PURCHASE = amazon_reviews$VERIFIED_PURCHASE
sort(colSums(subset(amazonreviewSparse, VERIFIED_PURCHASE == "N")))
sort(colSums(subset(amazonreviewSparse, VERIFIED_PURCHASE == 1)))
amazonreviewSparse$RATING = amazon_reviews$RATING
sort(colSums(subset(amazonreviewSparse, RATING == 1)))
sort(colSums(subset(amazonreviewSparse, RATING == 4)))
amazonreviewSparse$RATING = amazon_reviews$VERIFIED_PURCHASE
amazonreviewSparse$RATING = amazon_reviews$RATING
sort(colSums(subset(amazonreviewSparse, RATING == 4)))
sort(colSums(amazonreviewSparse))
sort(colSums(amazonreviewSparse))
View(amazonreviewSparse)
View(amazonreviewSparse)
sort(colSums(subset(amazonreviewSparse, VERIFIED_PURCHASE == 0)))
amazonreviewSparse = as.data.frame(as.matrix(spdtm))
sort(colSums(amazonreviewSparse))
amazonreviewSparse$RATING = amazon_reviews$RATING
sort(colSums(subset(amazonreviewSparse, RATING == 4)))
sort(colSums(subset(amazonreviewSparse, RATING == 1)))
smp_siz = floor(0.75*nrow(amazon_reviews))
smp_siz = floor(0.70*nrow(amazon_reviews))
train_ind=sample(seq_len(nrow(amazon_reviews)),size=smp_siz)
train=amazon_reviews[train_ind,]
test=amazon_reviews[-train_ind,]
glm(formula = RATING ~ ., family = "binomial", data = train)
egLR = glm(RATING~., data=train, family="binomial")
summary(egLR)
egLR = glm(RATING~., data=train, family="binomial")
library(mlbench)
glm(formula = RATING ~ balance, family = "binomial", data = train)
glm(formula = default ~ RATING, family = "binomial", data = train)
glm(formula = PRODUCT_CATEGORY ~ RATING, family = "binomial", data = train)
CateRateLR = glm(formula = PRODUCT_CATEGORY ~ RATING, family = "binomial", data = train)
summary(CateRateLR)
TXTRateLR = glm(formula = Product_TEXT ~ RATING, family = "binomial", data = train)
TXTRateLR = glm(formula = REVIEW_TEXT ~ RATING, family = "binomial", data = train)
summary(TXTRateLR)
smp_siz = floor(0.75*nrow(amazonreviewSparse))
smp_siz = floor(0.70*nrow(amazonreviewSparse))
train_ind=sample(seq_len(nrow(amazonreviewSparse)),size=smp_siz)
train_ind=sample(seq_len(nrow(amazon_reviews)),size=smp_siz)
sparsetrain_ind=sample(seq_len(nrow(amazon_reviews)),size=smp_siz)
sTrain=amazonreviewSparse[sparsetrain_ind,]
sTest=amazonreviewSparse[-sparsetrain_ind,]
egLR = glm(RATING~., data=train, family="binomial")
egLR = glm(RATING~., data=sTrain, family="binomial")
savehistory("~/FYP_LR_Prototype/workspace1.RData")
